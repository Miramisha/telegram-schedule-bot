require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const bot = new Telegraf(process.env.BOT_TOKEN);

const {
  showFullSchedule,
  showScheduleWeek,
  showScheduleMonth,
  showScheduleYear
} = require('./services/displaySchedule');

const {
  addDay,
  deleteSchedule,
  editSchedule
} = require('./services/scheduleService');


require('./bot/commands/start')(bot);
require('./bot/commands/add')(bot);
require('./bot/commands/view')(bot);
require('./bot/commands/viewWeek')(bot);
require('./bot/commands/viewMonth')(bot);
require('./bot/commands/viewYear')(bot);
require('./bot/commands/delete')(bot);
require('./bot/commands/edit')(bot);

bot.start((ctx) => {
  return ctx.reply(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      ['üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é'],
      ['üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü', 'üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥'],
      ['‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ùå –£–¥–∞–ª–∏—Ç—å', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å']
    ])
    .resize()
    .oneTime()
  );
});

bot.hears('üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', async (ctx) => {
  await showFullSchedule(ctx);
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å', (ctx) => {
  ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è');
});

bot.hears('‚ùå –£–¥–∞–ª–∏—Ç—å', (ctx) => {
  ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD');
});

bot.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', (ctx) => {
  ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç');
});

bot.hears('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', async (ctx) => {
  await showScheduleWeek(ctx);
});

bot.hears('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü', async (ctx) => {
  await showScheduleMonth(ctx);
});

bot.hears('üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥', async (ctx) => {
  await showScheduleYear(ctx);
});

bot.start((ctx) => {
  ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      keyboard: [
        ['üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ùå –£–¥–∞–ª–∏—Ç—å', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'],
        ['üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', 'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü', 'üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
});

bot.hears('üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', (ctx) => showFullSchedule(ctx));

bot.hears('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', (ctx) => showScheduleWeek(ctx));
bot.hears('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü', (ctx) => showScheduleMonth(ctx));
bot.hears('üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≥–æ–¥', (ctx) => showScheduleYear(ctx));

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å', (ctx) => {
  const userId = String(ctx.from.id);
  userStates[userId] = 'adding';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ —Å–æ–±—ã—Ç–∏–µ:\nüìÖ –ü—Ä–∏–º–µ—Ä: `2025-08-15 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º`', { parse_mode: 'Markdown' });
});

bot.hears('‚ùå –£–¥–∞–ª–∏—Ç—å', (ctx) => {
  const userId = String(ctx.from.id);
  userStates[userId] = 'deleting';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\nüìÖ –ü—Ä–∏–º–µ—Ä: `2025-08-15`', { parse_mode: 'Markdown' });
});

bot.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', (ctx) => {
  const userId = String(ctx.from.id);
  userStates[userId] = 'editing';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\nüìÖ –ü—Ä–∏–º–µ—Ä: `2025-08-15 –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞`', { parse_mode: 'Markdown' });
});

bot.on('text', async (ctx) => {
  const userId = String(ctx.from.id);
  const state = userStates[userId];

  if (!state) return; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

  const message = ctx.message.text;

  try {
    if (state === 'adding') {
      const match = message.match(/^(\d{4}-\d{2}-\d{2}) (.+)$/);
      if (!match) {
        return ctx.reply('‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ —Ç–∞–∫:\n`YYYY-MM-DD –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è`', { parse_mode: 'Markdown' });
      }

      const [, date, event] = match;
      await addDay(userId, date, event);
      ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${date} ‚Äî ${event}`);

    } else if (state === 'deleting') {
      const dateMatch = message.match(/^\d{4}-\d{2}-\d{2}$/);
      if (!dateMatch) {
        return ctx.reply('‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É: `YYYY-MM-DD`', { parse_mode: 'Markdown' });
      }

      await deleteSchedule(userId, message);
      ctx.reply(`üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ ${message}`);

    } else if (state === 'editing') {
      const match = message.match(/^(\d{4}-\d{2}-\d{2}) (.+)$/);
      if (!match) {
        return ctx.reply('‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ —Ç–∞–∫:\n`YYYY-MM-DD –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç`', { parse_mode: 'Markdown' });
      }

      const [, date, newText] = match;
      await editSchedule(userId, date, newText);
      ctx.reply(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${date} ‚Äî ${newText}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è:', error);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }

  delete userStates[userId]; // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
});

const userStates = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');


